. $HOME/dotfiles-local/zsh/z/z.sh
. $HOME/dotfiles-local/zsh/add_to_path/add_to_path.sh
. $HOME/dotfiles-local/zsh/remove_from_path/remove_from_path.sh
. $HOME/dotfiles-local/zsh/rails_cd/rails_cd.sh

# Brew path
export PATH=/usr/local/bin:${PATH}

# GPG Key TTY
export GPG_TTY=$(tty)

function todo {
  touch ~/.todo
  local todo
  todo="$*"
  echo $todo >> ~/.todo
  cat -n ~/.todo
}

# GOPATH
if command -v go > /dev/null
then
  mkdir -p $HOME/workspace/go/bin
  export GOPATH=$HOME/workspace/go
  export PATH="${GOPATH}/bin":${PATH}
fi

# Google Cloud SDK

if test -f "~/.asdf/shims/python" ; then
  export CLOUDSDK_PYTHON="/home/trevor/.asdf/shims/python"
fi

if command -v brew > /dev/null ; then
  export HOMEBREW_PREFIX=/opt/homebrew
fi

# needed for postgres ASDF install
# https://github.com/smashedtoatoms/asdf-postgres?tab=readme-ov-file#mac
export PKG_CONFIG_PATH="/opt/homebrew/bin/pkg-config:$(brew --prefix icu4c)/lib/pkgconfig:$(brew --prefix curl)/lib/pkgconfig:$(brew --prefix zlib)/lib/pkgconfig"

if test -d "$HOMEBREW_CELLAR/asdf" ; then
  . $(brew --prefix asdf)/libexec/asdf.sh
elif test -d "$HOME/.asdf" ; then
  . $HOME/.asdf/asdf.sh
  fpath=(${ASDF_DIR}/completions $fpath)
  autoload -Uz compinit && compinit
fi

if test -f "/usr/bin/python" ; then
  export CLOUDSDK_PYTHON="/usr/bin/python"
fi

gcloudSdkPath="${HOMEBREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk"
if test -d "${gcloudSdkPath}"; then
  for file in "path" "completion" ; do
    [ -f "${gcloudSdkPath}/${file}.zsh.inc" ] &&
      source "${gcloudSdkPath}/${file}.zsh.inc"
  done
  export USE_GKE_GCLOUD_AUTH_PLUGIN=True
fi

if test -d "~/google-cloud-sdk/"; then
  gcloudSdkPath="~/google-cloud-sdk"
  for file in "path" "completion" ; do
    [ -f "${gcloudSdkPath}/${file}.zsh.inc" ] &&
      source "${gcloudSdkPath}/${file}.zsh.inc"
  done
fi

if command -v docker-machine > /dev/null
then
  if docker-machine active > /dev/null 2>&1 ; then
    eval "$(docker-machine env $(docker-machine active))"
  fi
fi


if command -v tk > /dev/null
then
  tk complete 2> /dev/null
fi

if command -v kubectl > /dev/null
then
  source <(kubectl completion zsh)
fi

if command -v helm > /dev/null
then
  source <(helm completion zsh)
fi


# alias python="/usr/local/bin/python3"

if type brew &> /dev/null ; then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

stty icrnl
export PATH="/usr/local/opt/node@14/bin:$PATH"

if command -v ngrok &>/dev/null; then
  eval "$(ngrok completion)"
fi

if command -v nvim  > /dev/null ; then
  alias vim=nvim
fi

function tat() {
  local session_name=$(basename "$PWD")
  local window_name=$session_name
  
  # Check if session exists
  if tmux has-session -t "$session_name" 2>/dev/null; then
    # Session exists, check for window name conflicts
    local counter=1
    while tmux list-windows -t "$session_name" -F '#W' 2>/dev/null | grep -qx "$window_name"; do
      window_name="${session_name}-${counter}"
      ((counter++))
    done
    
    # Create new window in existing session
    tmux new-window -t "$session_name" -n "$window_name" -c "$PWD" \; \
      send-keys "nvim" C-m \; \
      split-window -v -p 30 \; \
      split-window -h \; \
      select-pane -t 2
    
    tmux attach-session -t "$session_name"
  else
    # Create new session with named window
    tmux new-session -s "$session_name" -n "$window_name" -d \; \
      send-keys "nvim" C-m \; \
      split-window -v -p 30 \; \
      split-window -h \; \
      select-pane -t 2 \; \
      attach-session -t "$session_name"
  fi
}
